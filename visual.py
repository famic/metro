import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt


class InteractiveGraph:
    def __init__(self, G, pos=None):
        self.G = G
        self.pos = pos if pos is not None else nx.spring_layout(G, k=1, iterations=50)
        self.selected_node = None
        self.dragging = False
        self.fig, self.ax = plt.subplots(figsize=(18, 14))  # –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø–æ–ª–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.nodes_list = list(self.G.nodes())

        self.setup_graph()
        self.connect_events()

    def format_node_name(self, name):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∑–ª–∞: —Å–æ–∫—Ä–∞—â–∞–µ—Ç '–ì–ª–∞–≤–Ω—ã–π —Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –ø—É—Ç—å' –¥–æ '–ì–°–ü'"""
        if not name:
            return ""

        # –ó–∞–º–µ–Ω—è–µ–º "–ì–ª–∞–≤–Ω—ã–π —Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –ø—É—Ç—å" –Ω–∞ "–ì–°–ü"
        formatted_name = name.replace("–ì–ª–∞–≤–Ω—ã–π —Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –ø—É—Ç—å", "–ì–°–ü")

        return formatted_name

    def get_node_color(self, node):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç —É–∑–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞"""
        node_type = self.G.nodes[node].get('type', '')
        if node == self.selected_node:
            return 'red'  # –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —É–∑–µ–ª
        elif 'MAIN_STATION' in node_type:
            return 'lightblue'
        elif 'PARKING' in node_type:
            return 'lightgreen'
        elif 'EXIT' in node_type:
            return 'lightcoral'
        else:
            return 'gray'

    def get_node_size(self, node):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —É–∑–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞"""
        node_type = self.G.nodes[node].get('type', '')
        if node == self.selected_node:
            return 600  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞
        elif 'MAIN_STATION' in node_type:
            return 450
        elif 'PARKING' in node_type:
            return 300
        elif 'EXIT' in node_type:
            return 350
        else:
            return 250

    def setup_graph(self):
        self.ax.clear()

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        node_colors = [self.get_node_color(node) for node in self.nodes_list]
        node_sizes = [self.get_node_size(node) for node in self.nodes_list]

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        labels = {}
        for node in self.G.nodes():
            name = self.G.nodes[node].get('name', '')
            formatted_name = self.format_node_name(name)
            labels[node] = formatted_name if formatted_name else node[:8]

        # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ
        nx.draw_networkx_edges(self.G, self.pos, ax=self.ax,
                               edge_color='gray', arrows=True,
                               arrowsize=20, alpha=0.7, width=1.5)

        nx.draw_networkx_nodes(self.G, self.pos, ax=self.ax,
                               node_color=node_colors,
                               node_size=node_sizes, alpha=0.9,
                               edgecolors='black', linewidths=1.5)

        # –†–∏—Å—É–µ–º –ø–æ–¥–ø–∏—Å–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        nx.draw_networkx_labels(self.G, self.pos, ax=self.ax,
                                labels=labels, font_size=9,
                                font_weight='bold',
                                font_family='DejaVu Sans')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É–∑–ª–µ
        if self.selected_node:
            node_info = self.G.nodes[self.selected_node]
            full_name = node_info.get('name', 'Unknown')
            formatted_name = self.format_node_name(full_name)
            info_text = f"–í—ã–±—Ä–∞–Ω: {formatted_name}\n–¢–∏–ø: {node_info.get('type', 'Unknown')}\nID: {self.selected_node[:8]}..."
            self.ax.text(0.02, 0.98, info_text, transform=self.ax.transAxes,
                         fontsize=11, verticalalignment='top',
                         bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.9))

        self.ax.set_title(
            "üöÇ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–∞—è —Å–µ—Ç—å\nüñ±Ô∏è –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ —É–∑–ª—ã | R - —Å–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–π | ESC - –æ—Ç–º–µ–Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è",
            size=14, pad=20)
        self.ax.axis('off')

        # –õ–µ–≥–µ–Ω–¥–∞
        legend_elements = [
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='lightblue',
                       markersize=12, label='–°—Ç–∞–Ω—Ü–∏–∏ (–ì–°–ü)', markeredgecolor='black'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='lightgreen',
                       markersize=10, label='–£–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–∞—Ä–∫–æ–≤–∫–∏', markeredgecolor='black'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='lightcoral',
                       markersize=11, label='–í—ã—Ö–æ–¥—ã/–¢—É–ø–∏–∫–∏', markeredgecolor='black'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='red',
                       markersize=14, label='–í—ã–±—Ä–∞–Ω–Ω—ã–π —É–∑–µ–ª', markeredgecolor='black')
        ]
        self.ax.legend(handles=legend_elements, loc='upper right',
                       framealpha=0.9, fontsize=11)

    def connect_events(self):
        self.fig.canvas.mpl_connect('button_press_event', self.on_press)
        self.fig.canvas.mpl_connect('motion_notify_event', self.on_motion)
        self.fig.canvas.mpl_connect('button_release_event', self.on_release)
        self.fig.canvas.mpl_connect('key_press_event', self.on_key)

    def on_press(self, event):
        if event.inaxes != self.ax:
            return

        # –ò—â–µ–º —É–∑–µ–ª –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        closest_node = None
        min_distance = float('inf')

        for node in self.G.nodes():
            x, y = self.pos[node]
            distance = ((x - event.xdata) ** 2 + (y - event.ydata) ** 2) ** 0.5
            if distance < 0.05 and distance < min_distance:  # —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å –∑–∞—Ö–≤–∞—Ç–∞
                min_distance = distance
                closest_node = node

        if closest_node:
            self.selected_node = closest_node
            self.dragging = True
            self.redraw()

    def on_motion(self, event):
        if self.dragging and self.selected_node and event.inaxes == self.ax:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —É–∑–ª–∞
            self.pos[self.selected_node] = [event.xdata, event.ydata]
            self.redraw()

    def on_release(self, event):
        self.dragging = False
        # –£–∑–µ–ª –æ—Å—Ç–∞–µ—Ç—Å—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è
        self.redraw()

    def on_key(self, event):
        # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–π –ø–æ –Ω–∞–∂–∞—Ç–∏—é 'r'
        if event.key == 'r':
            self.pos = nx.spring_layout(self.G, k=1.2, iterations=100)  # –£–≤–µ–ª–∏—á–∏–ª k –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            self.selected_node = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            self.redraw()
        # –û—Ç–º–µ–Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é ESC
        elif event.key == 'escape':
            self.selected_node = None
            self.redraw()

    def redraw(self):
        self.setup_graph()
        self.fig.canvas.draw()

    def show(self):
        plt.tight_layout()
        plt.show()


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞
print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
nodes_df = pd.read_csv('nodes_202510210940.csv')
links_df = pd.read_csv('links.csv')

print(f"–£–∑–ª–æ–≤: {len(nodes_df)}")
print(f"–°–≤—è–∑–µ–π: {len(links_df)}")

# –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
G = nx.DiGraph()

# –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
for _, node in nodes_df.iterrows():
    G.add_node(node['id'], name=node['name'], type=node['type'])

# –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏
added_edges = 0
for _, link in links_df.iterrows():
    if link['start_node'] in G.nodes and link['finish_node'] in G.nodes:
        G.add_edge(link['start_node'], link['finish_node'])
        added_edges += 1

print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–≤—è–∑–µ–π –≤ –≥—Ä–∞—Ñ: {added_edges}")

# –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∞
print(f"\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞—Ñ–∞:")
print(f"- –£–∑–ª–æ–≤: {G.number_of_nodes()}")
print(f"- –°–≤—è–∑–µ–π: {G.number_of_edges()}")
print(f"- –¢–∏–ø—ã —É–∑–ª–æ–≤:")
node_types = {}
for node in G.nodes():
    node_type = G.nodes[node].get('type', 'Unknown')
    node_types[node_type] = node_types.get(node_type, 0) + 1

for typ, count in node_types.items():
    print(f"  {typ}: {count}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
print(f"\n–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π:")
sample_nodes = list(G.nodes())[:5]
for node in sample_nodes:
    original_name = G.nodes[node].get('name', '')
    formatted_name = InteractiveGraph(G).format_node_name(original_name)
    print(f"  '{original_name}' -> '{formatted_name}'")

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
print("\n–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞...")
print("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
print("üñ±Ô∏è  –õ–ö–ú - –≤—ã–±—Ä–∞—Ç—å –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å —É–∑–µ–ª")
print("‚å®Ô∏è  R - —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —É–∑–ª–æ–≤")
print("‚å®Ô∏è  ESC - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É–∑–ª–∞")
print("\n–í—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–∑–ª–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å –∑–∞–º–µ–Ω–æ–π '–ì–ª–∞–≤–Ω—ã–π —Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –ø—É—Ç—å' –Ω–∞ '–ì–°–ü'")

interactive_graph = InteractiveGraph(G)
interactive_graph.show()