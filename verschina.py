import pandas as pd
import networkx as nx
from tabulate import tabulate

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
nodes_df = pd.read_csv('nodes_202510210940.csv')
links_df = pd.read_csv('links.csv')

# –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
G = nx.DiGraph()

# –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
for _, node in nodes_df.iterrows():
    G.add_node(node['id'], name=node['name'], type=node['type'])

# –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏
for _, link in links_df.iterrows():
    if link['start_node'] in G.nodes and link['finish_node'] in G.nodes:
        G.add_edge(link['start_node'], link['finish_node'],
                   link_type=link.get('type', 'UNKNOWN'),
                   link_id=link['id'])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —É–∑–ª–∞
def format_node_name(name):
    return name.replace("–ì–ª–∞–≤–Ω—ã–π —Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –ø—É—Ç—å", "–ì–°–ü")


print("=" * 120)
print("–¢–ê–ë–õ–ò–¶–ê –í–ï–†–®–ò–ù –ì–†–ê–§–ê –ò –ò–• –†–ï–ë–ï–†")
print("=" * 120)

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤–µ—Ä—à–∏–Ω
vertices_data = []
for node in G.nodes():
    node_name = G.nodes[node].get('name', 'Unknown')
    node_type = G.nodes[node].get('type', 'Unknown')
    formatted_name = format_node_name(node_name)

    # –°—á–∏—Ç–∞–µ–º —Å—Ç–µ–ø–µ–Ω–∏
    in_degree = G.in_degree(node)
    out_degree = G.out_degree(node)
    total_degree = in_degree + out_degree

    vertices_data.append({
        '–í–µ—Ä—à–∏–Ω–∞': formatted_name,
        '–¢–∏–ø': node_type,
        'ID': node[:12] + '...',
        '–í—Ö–æ–¥—è—â–∏–µ': in_degree,
        '–ò—Å—Ö–æ–¥—è—â–∏–µ': out_degree,
        '–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π': total_degree
    })

# –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≤–µ—Ä—à–∏–Ω
vertices_df = pd.DataFrame(vertices_data)

# –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –≤–µ—Ä—à–∏–Ω
print("\nüìä –¢–ê–ë–õ–ò–¶–ê –í–ï–†–®–ò–ù –ì–†–ê–§–ê:")
print(tabulate(vertices_df, headers='keys', tablefmt='grid', showindex=True))
print(f"\n–í—Å–µ–≥–æ –≤–µ—Ä—à–∏–Ω: {len(vertices_df)}")

# –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å–≤—è–∑–µ–π
print("\n" + "=" * 120)
print("–î–ï–¢–ê–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –°–í–Ø–ó–ï–ô")
print("=" * 120)

connections_data = []
for node in G.nodes():
    node_name = G.nodes[node].get('name', 'Unknown')
    formatted_name = format_node_name(node_name)

    # –ò—Å—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏
    for _, target, data in G.out_edges(node, data=True):
        target_name = format_node_name(G.nodes[target].get('name', 'Unknown'))
        link_type = data.get('link_type', 'UNKNOWN')

        connections_data.append({
            '–¢–∏–ø —Å–≤—è–∑–∏': '–ò—Å—Ö–æ–¥—è—â–∞—è ‚Üí',
            '–û—Ç –≤–µ—Ä—à–∏–Ω—ã': formatted_name,
            '–ö –≤–µ—Ä—à–∏–Ω–µ': target_name,
            '–¢–∏–ø —Å–≤—è–∑–∏': link_type,
            'ID –Ω–∞—á–∞–ª–∞': node[:8] + '...',
            'ID –∫–æ–Ω—Ü–∞': target[:8] + '...'
        })

    # –í—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏
    for source, _, data in G.in_edges(node, data=True):
        source_name = format_node_name(G.nodes[source].get('name', 'Unknown'))
        link_type = data.get('link_type', 'UNKNOWN')

        connections_data.append({
            '–¢–∏–ø —Å–≤—è–∑–∏': '–í—Ö–æ–¥—è—â–∞—è ‚Üê',
            '–û—Ç –≤–µ—Ä—à–∏–Ω—ã': source_name,
            '–ö –≤–µ—Ä—à–∏–Ω–µ': formatted_name,
            '–¢–∏–ø —Å–≤—è–∑–∏': link_type,
            'ID –Ω–∞—á–∞–ª–∞': source[:8] + '...',
            'ID –∫–æ–Ω—Ü–∞': node[:8] + '...'
        })

# –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Å–≤—è–∑–µ–π
if connections_data:
    connections_df = pd.DataFrame(connections_data)
    print("\nüîó –¢–ê–ë–õ–ò–¶–ê –í–°–ï–• –°–í–Ø–ó–ï–ô:")
    print(tabulate(connections_df, headers='keys', tablefmt='grid', showindex=False))
    print(f"\n–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {len(connections_df)}")
else:
    print("–ù–µ—Ç —Å–≤—è–∑–µ–π –≤ –≥—Ä–∞—Ñ–µ")

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤–µ—Ä—à–∏–Ω
print("\n" + "=" * 120)
print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –í–ï–†–®–ò–ù")
print("=" * 120)

type_stats = vertices_df.groupby('–¢–∏–ø').agg({
    '–í–µ—Ä—à–∏–Ω–∞': 'count',
    '–í—Ö–æ–¥—è—â–∏–µ': 'sum',
    '–ò—Å—Ö–æ–¥—è—â–∏–µ': 'sum',
    '–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π': 'sum'
}).rename(columns={'–í–µ—Ä—à–∏–Ω–∞': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω'}).reset_index()

type_stats['–°—Ä–µ–¥–Ω—è—è —Å—Ç–µ–ø–µ–Ω—å'] = (type_stats['–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π'] / type_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω']).round(2)

print(tabulate(type_stats, headers='keys', tablefmt='grid', showindex=False))

# –¢–∞–±–ª–∏—Ü–∞ —Å–∞–º—ã—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω
print("\n" + "=" * 120)
print("–¢–û–ü-10 –°–ê–ú–´–• –°–í–Ø–ó–ê–ù–ù–´–• –í–ï–†–®–ò–ù")
print("=" * 120)

top_vertices = vertices_df.nlargest(10, '–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π')[['–í–µ—Ä—à–∏–Ω–∞', '–¢–∏–ø', '–í—Ö–æ–¥—è—â–∏–µ', '–ò—Å—Ö–æ–¥—è—â–∏–µ', '–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π']]
print(tabulate(top_vertices, headers='keys', tablefmt='grid', showindex=True))

# –¢–∞–±–ª–∏—Ü–∞ –≤–µ—Ä—à–∏–Ω –±–µ–∑ —Å–≤—è–∑–µ–π
print("\n" + "=" * 120)
print("–í–ï–†–®–ò–ù–´ –ë–ï–ó –°–í–Ø–ó–ï–ô")
print("=" * 120)

isolated_vertices = vertices_df[vertices_df['–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π'] == 0][['–í–µ—Ä—à–∏–Ω–∞', '–¢–∏–ø']]
if not isolated_vertices.empty:
    print(tabulate(isolated_vertices, headers='keys', tablefmt='grid', showindex=True))
    print(f"\n–í–µ—Ä—à–∏–Ω –±–µ–∑ —Å–≤—è–∑–µ–π: {len(isolated_vertices)}")
else:
    print("–ù–µ—Ç –≤–µ—Ä—à–∏–Ω –±–µ–∑ —Å–≤—è–∑–µ–π")

# –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω (–ø—Ä–∏–º–µ—Ä)
print("\n" + "=" * 120)
print("–ü–†–ò–ú–ï–† –î–ï–¢–ê–õ–¨–ù–û–ô –¢–ê–ë–õ–ò–¶–´ –î–õ–Ø –í–ï–†–®–ò–ù –°–í–Ø–ó–ï–ô")
print("=" * 120)

# –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–µ—Ä—à–∏–Ω –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
sample_nodes = list(G.nodes())
detailed_data = []

for node in sample_nodes:
    node_name = format_node_name(G.nodes[node].get('name', 'Unknown'))
    node_type = G.nodes[node].get('type', 'Unknown')

    # –ò—Å—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏
    out_edges = list(G.out_edges(node, data=True))
    for _, target, data in out_edges:
        target_name = format_node_name(G.nodes[target].get('name', 'Unknown'))
        detailed_data.append({
            '–í–µ—Ä—à–∏–Ω–∞': node_name,
            '–¢–∏–ø –≤–µ—Ä—à–∏–Ω—ã': node_type,
            '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': '‚Üí –ò–°–•–û–î–Ø–©–ê–Ø',
            '–°–≤—è–∑–∞–Ω–∞ —Å': target_name,
            '–¢–∏–ø —Å–≤—è–∑–∏': data.get('link_type', 'UNKNOWN')
        })

    # –í—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏
    in_edges = list(G.in_edges(node, data=True))
    for source, _, data in in_edges:
        source_name = format_node_name(G.nodes[source].get('name', 'Unknown'))
        detailed_data.append({
            '–í–µ—Ä—à–∏–Ω–∞': node_name,
            '–¢–∏–ø –≤–µ—Ä—à–∏–Ω—ã': node_type,
            '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': '‚Üê –í–•–û–î–Ø–©–ê–Ø',
            '–°–≤—è–∑–∞–Ω–∞ —Å': source_name,
            '–¢–∏–ø —Å–≤—è–∑–∏': data.get('link_type', 'UNKNOWN')
        })

if detailed_data:
    detailed_df = pd.DataFrame(detailed_data)
    print(f"\n–î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö {len(sample_nodes)} –≤–µ—Ä—à–∏–Ω:")
    print(tabulate(detailed_df, headers='keys', tablefmt='grid', showindex=False))